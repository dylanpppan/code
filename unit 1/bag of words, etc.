def extract_words(input_string):
    """
    Helper function for bag_of_words()
    Inputs a text string
    Returns a list of lowercase words in the string.
    Punctuation and digits are separated out into their own words.
    Example: extract_words('I eat an apple') --> ['I','eat','an','apple']
    """
    for c in punctuation + digits:
        input_string = input_string.replace(c, ''  + c +  '')

    return input_string.lower().split()
    
def bag_of_words(list_of_reviews, stopwords=None):
    """
    Inputs a list of string reviews
    Returns a dictionary of unique unigrams occurring over the input
    Example: bag_of_words(['jack is him']) --> {'jack': 0, 'is': 1, 'him': 2}
    """
    if stopwords is None:
        stopwords = np.array([])

    stopwords = np.char.lower(stopwords)
    dictionary = {} # maps word to unique index
    for review in list_of_reviews:
        word_list = extract_words(review)
        for word in word_list:
            if (word not in dictionary) and (word not in stopwords):
                dictionary[word] = len(dictionary)
    return dictionary
    
    
def extract_bow_feature_vectors(list_of_reviews, dictionary):
    """
    Inputs a list of string reviews
    Inputs the dictionary of words as given by bag_of_words
    Returns the bag-of-words feature matrix representation of the data.
    The returned matrix is of shape (n, m), where n is the number of reviews
    and m the total number of entries in the dictionary.
    Using binary representation
    """
    # Your code here

    num_reviews = len(list_of_reviews)
    feature_matrix = np.zeros([num_reviews, len(dictionary)])

    for i, text in enumerate(reviews):
        word_list = extract_words(text)
        for word in word_list:
            if word in dictionary:
                feature_matrix[i, dictionary[word]] = 1
    return feature_matrix
    
    
    
def extract_bow_feature_vectors_2(list_of_reviews, dictionary,use_count=False):
    """
    Inputs a list of string reviews
    Inputs the dictionary of words as given by bag_of_words
    Returns the bag-of-words feature matrix representation of the data.
    The returned matrix is of shape (n, m), where n is the number of reviews
    and m the total number of entries in the dictionary.
    Using counts representation.
    """

    num_reviews = len(list_of_reviews)
    feature_matrix = np.zeros([num_reviews, len(dictionary)])

    for i, text in enumerate(reviews):
        word_list = extract_words(text)
        for word in word_list:
            if word in dictionary:
                if (use_count):
                    feature_matrix[i, dictionary[word]] += 1    
                else:
                    feature_matrix[i, dictionary[word]] = 1
    return feature_matrix
